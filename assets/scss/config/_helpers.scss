
/*  

Harry Roberts says:

"Only use @extend when the rulesets that you are trying 
to DRY out are inherently and thematically related."

- http://csswizardry.com/2014/11/when-to-use-extend-when-to-use-a-mixin/
- http://www.sitepoint.com/avoid-sass-extend/

These are mixins because they are "helpers" and not used
in a thematically related fashion.

There are a few classes printed here as well as mixins.
Those are primarily for prototyping purposes, but not
exclusively.

*/


// ----
// Formatting
// ----

@mixin center-block() {
    margin: 0 auto;
    display: block;
}

.clearfix {
    @include clearfix;
}

%img_full {
    width: 100%;
}

%full_at_base {
    // @include make-xs-column(12);
}

%pad_base {
    padding: $base;
}

%pad_tb {
    padding: $base 0;
}





// ----
// Typography
// ----


// Change text alignment at a certain breakpoint.

@mixin change-text-align($base, $bp, $new) {
    text-align: $base;
    
    @include bp($bp) {
        text-align: $new;
    }
}


// Font Size Mixin

// Gah.
// a) This may be overly abstracted and not necessary.
// b) Ran into the interpolation issue, so had to write this gross function.

@function output-size($value) {
    @if $value == h1 {
        @return $h1;
    }
    @elseif $value == h2 {
        @return $h2;
    }
    @elseif $value == h3 {
        @return $h3;
    }
    @elseif $value == h4 {
        @return $h4;
    }
    @elseif $value == h5 {
        @return $h5;
    }
    @elseif $value == h6 {
        @return $h6;
    }
    @elseif $value == base {
        @return $base;
    }
    @elseif $value == sml {
        @return $sml;
    }
    @elseif $value == xsml {
        @return $xsml;
    }
}

@mixin font-size($size) {
    font-size: output-size($size);
}


// Uppercase and letterspacing.

@mixin upperspace {
    text-transform: uppercase;
    letter-spacing: 1px;
}


// Small, sans-serif text.
// Used primarily for forms and complimentary information.

@mixin meta {
    font-size: $sml;
    font-family: $form-font;
    margin: 0;
}




// ----
// Visual Design
// ----


// Change background and text color.

@mixin rotate($text: $text-light, $bkgd: $text-dark) {
    background-color: $bkgd;
    color: $text;
}






// ----
// Content
// ----


%img_highlight {
    border: $accent-border;
}


// Alerts

%alert,
.alert {
    @include rotate($text-dark, $accent-vlight);
    padding: $base;
}








// ----
// Lists
// ----

%unstyle-list {
    list-style: none;
}

%horizontal-list {
    ul {
        @extend %unstyle-list;
    }
    
    li {
        display: inline-block;    
    }
}

%horizontal-list-center {
    text-align: center;
    @extend %horizontal-list;
}








// Hold


%form-base {
    padding: $sml/3 $sml/2;
    font-family: $form-font;
}


%block {
	padding: $h4 $h3;
}


.hide-until-md, 
%hide-until-md {
   	display: none !important;
    @include bp(med) {
        display: inline-block !important; 
    }   
}

.hide-after-md, 
%hide-after-md {
	@include bp(med) {
        display: none !important;
    }
}

%rotate {
	color: $rotate-text;
	background-color: $rotate-bkgd;
}

.meta,
%meta {
    @include meta;
}

    %meta-light {
        @include meta;
        color: $text-med;
    }

    %meta-dark {
        @include meta;
        color: $text-med;
    }



