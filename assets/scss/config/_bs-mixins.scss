
// ---
// Cusomized Bootstrap Scaffolding Mixins
// ---


// ---
//
// Changes made by Lara:
// - Added "@if $gutter != 0" conditional to prevent overriding gutter padding
// - Changed pixel values to values defined in _settings.scss
// - Moved all styles into MQ
// - Created an @extend for static styles
// ---


// ----
// ---- Screen sizes
// ----

$screen-sm:    28em;
$screen-md:    30em;
$screen-lg:    65em;

$contain-squish: 35em;
$contain-default: 45em;
$contain-full: 55em;



//== Media queries breakpoints
//
//## Define the breakpoints at which your layout will change, adapting to different screen sizes.

// Small screen / tablet
$screen-sm-min:              $screen-sm !default;

// Medium screen
$screen-md-min:              $screen-md !default;

// Large screen / wide desktop
$screen-lg-min:              $screen-lg !default;

// So media queries don't overlap when required, provide a maximum
$screen-xs-max:              ($screen-sm-min - 1) !default;
$screen-sm-max:              ($screen-md-min - 1) !default;
$screen-md-max:              ($screen-lg-min - 1) !default;



// ----
// Grid Settings
// ----

$grid-columns:              9 !default;
//** Padding between columns. Gets divided in half for the left and right.
$gutter:                    $h3 !default;


// Add static grid styles into an extend
%bs-base {
    float: left;
    position: relative;
    min-height: 1px;
    width: 100%;
}

%bs-pad {
    padding-left:  ($gutter / 2);
    padding-right: ($gutter / 2);
}



// ----
// Containers
// ---

// Wrapper to contain internal columns.
// The negative margin accounts for the extra padding from nested columns


%container {
  margin-right: auto;
  margin-left: auto;
  padding-left: $gutter / 2;
  padding-right: $gutter / 2;
  max-width: $contain-full;
}

// To contain a primary section of content. 
// Max width of the widest inner wrap (below).
.contain {
  @extend %container;
}




// ----
// Inner Wraps
// ---
// Mixin to have "squish" and "full" wraps to allow for overhanging elements


@mixin inner($width: base, $bp: med, $gutter: true) {
    @extend %bs-pad;
    @if $width == base {
        margin-left: percentage((1 / $grid-columns));   
        margin-right: percentage((1 / $grid-columns));
    }
    @else if $width == squish {
        @include bp($bp) {
            margin-right: percentage((2 / $grid-columns));   
            margin-left: percentage((2 / $grid-columns));       
        }
    }
    @else if $width == full {}
  
}

.inner {
    @include inner(); 
}

.inner-full {
    @include inner(full); 
}

.inner-squish {
    @include inner(squish);
}

.inner-np {
    padding: 0;
}





// ----
// Rows
// ----
// For wrapping nested columns

@mixin make-row($gutter: $gutter, $margin: true) {
    @if $margin == true {
        margin-left:  ($gutter / -2);
        margin-right: ($gutter / -2);      
    }
  
    @extend %clearfix;
}

.row {
    @include make-row();
}





// ----
// Grid Mixins
// ---


// Conditionally print the gutter

@mixin bs-gutter($gutter) {
    @if $gutter != false {
      @extend %bs-pad;
    }
}



// Extra Small

@mixin make-xs-column($columns, $gutter: $gutter) {
  @extend %bs-base;
  @include bs-gutter($gutter);
  
  width: percentage(($columns / $grid-columns));
  min-height: 1px;
}
@mixin make-xs-column-offset($columns) {
  margin-left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-push($columns) {
  left: percentage(($columns / $grid-columns));
}
@mixin make-xs-column-pull($columns) {
  right: percentage(($columns / $grid-columns));
}



// Small

@mixin make-sm-column($columns, $gutter: $gutter) {
  @extend %bs-base;
  @include bs-gutter($gutter);

  @media (min-width: $screen-sm-min) {
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-offset($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-sm-column-push($columns) {
  @media (min-width: $screen-sm-min) {
    margin-left: (-percentage(($columns / $grid-columns)));
  }
}
@mixin make-sm-column-pull($columns) {
  @media (min-width: $screen-sm-min) {
    right: percentage(($columns / $grid-columns));
  }
}



// Medium

@mixin make-md-column($columns, $gutter: $gutter) {
  @extend %bs-base;
  @include bs-gutter($gutter);

  @media (min-width: $screen-md-min) {
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-offset($columns) {
    @include bs-gutter($gutter);
  @media (min-width: $screen-md-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-push($columns) {
  @media (min-width: $screen-md-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-md-column-pull($columns) {
  @media (min-width: $screen-md-min) {
    right: percentage(($columns / $grid-columns));
  }
}


// Large

@mixin make-lg-column($columns, $gutter: $gutter) {
  @extend %bs-base;
  @media (min-width: $screen-lg-min) {
    width: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-offset($columns) {
  @media (min-width: $screen-lg-min) {
    margin-left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-push($columns) {
  @media (min-width: $screen-lg-min) {
    left: percentage(($columns / $grid-columns));
  }
}
@mixin make-lg-column-pull($columns) {
  @media (min-width: $screen-lg-min) {
    right: percentage(($columns / $grid-columns));
  }
}



// ----
// Generate Utility Classes
// ----

@for $i from 1 to $grid-columns {
    .col-xs-#{$i} { @include make-xs-column($i); }
    .col-xs-#{$i}-np { @include make-xs-column($i, false); }

    // .col-xs-#{$i}-push { @include make-xs-column-push($i); }
    // .col-xs-#{$i}-pull { @include make-xs-column-pull($i); }
    // .col-xs-#{$i}-offset { @include make-xs-column-offset($i); }

    .col-sm-#{$i} { @include make-sm-column($i); }
    .col-sm-#{$i}-np { @include make-sm-column($i, false); }

    // .col-sm-#{$i}-push { @include make-sm-column-push($i); }
    // .col-sm-#{$i}-pull { @include make-sm-column-pull($i); }
    // .col-sm-#{$i}-offset { @include make-sm-column-offset($i); }

    .col-md-#{$i} { @include make-md-column($i); }
    .col-md-#{$i}-np { @include make-md-column($i, false); }

    // .col-md-#{$i}-push { @include make-md-column-push($i); }
    // .col-md-#{$i}-pull { @include make-md-column-pull($i); }
    // .col-md-#{$i}-offset { @include make-md-column-offset($i); }

    .col-lg-#{$i} { @include make-lg-column($i); }
    .col-lg-#{$i}-np { @include make-lg-column($i, false); }

    // .col-lg-#{$i}-push { @include make-lg-column-push($i); }
    // .col-lg-#{$i}-pull { @include make-lg-column-pull($i); }
    // .col-lg-#{$i}-offset { @include make-lg-column-offset($i); }
}